{"name":"Simpool","tagline":"Simple object pooling for Java","body":"About\r\n-----\r\nSimpool is a simple object pooling library for Java.  There is some debate over\r\nthe use of object pooling for languages like Java, but I'll leave that up to\r\nyou.  I really just made this because I had an hour of free time and had a\r\nprogramming itch to scratch.\r\n\r\nLicense\r\n-------\r\nSimpool is licensed under the BSD 2-Clause license. A copy of the license can be\r\nfound in the header of every source file as well as in the LICENSE file included\r\nwith the Simpool.\r\n\r\nUsing Simpool\r\n-------------\r\nThere are 3 classes you need to understand in order to use Simpool. Poolable is\r\nan abstraction for the type that you want to pool.  PoolableFactory is an\r\nabstraction for instantiation of the type that you want to pool.  Pool is type\r\nthat actually manages the pooling of objects.\r\n\r\n####Poolable\r\nAny type that you want to pool must implement the Poolable interface.  It is a\r\nminimal interface that only requires implementation of the reset() method, which\r\nis called when an instance is returned to a Pool.\r\n\r\n####PoolableFactory\r\nFor any type that you want to pool you must also provide a class that implements\r\nthe PoolableFactory interface.  It is a minimal interface that only requires\r\nimplementation of the create() method, which is used by a Pool whenever another\r\ninstance of the pooled type must be created.\r\n\r\n####Pool\r\nThe Pool class manages the actual pooling of objects.  You construct one with a\r\nPoolableFactory for the type you want to pool.  You can optionally specify a\r\nstarting size of the pool as well as a maximum number of allocations that the\r\nPool is allowed to make.\r\n\r\nJavadocs\r\n--------\r\nSee the Javadocs for more details.\r\n\r\n[http://finnkuusisto.github.com/Simpool/doc](http://finnkuusisto.github.com/Simpool/doc)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}